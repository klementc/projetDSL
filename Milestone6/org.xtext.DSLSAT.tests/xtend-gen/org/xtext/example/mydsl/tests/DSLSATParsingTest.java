/**
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.DSLSATStandaloneSetupGenerated;
import org.xtext.example.mydsl.dSLSAT.Form;
import org.xtext.example.mydsl.tests.DSLSAT4JSolver;
import org.xtext.example.mydsl.tests.DSLSATDIMACSTransform;
import org.xtext.example.mydsl.tests.DSLSATInjectorProvider;
import org.xtext.example.mydsl.tests.DSLSATMiniSAT;
import org.xtext.example.mydsl.tests.DSLSATSolversComparison;
import org.xtext.example.mydsl.tests.RandomDSLSATGenerator;

@ExtendWith(InjectionExtension.class)
@InjectWith(DSLSATInjectorProvider.class)
@SuppressWarnings("all")
public class DSLSATParsingTest {
  @Inject
  private ParseHelper<Form> parseHelper;
  
  public static Form loadFormula(final URI uri) {
    Form _xblockexpression = null;
    {
      new DSLSATStandaloneSetupGenerated().createInjectorAndDoEMFRegistration();
      Resource res = new ResourceSetImpl().getResource(uri, true);
      EObject _get = res.getContents().get(0);
      _xblockexpression = ((Form) _get);
    }
    return _xblockexpression;
  }
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(!A v B) ^ (C v !D) ^ A");
      _builder.newLine();
      final Form result = this.parseHelper.parse(_builder);
      DSLSATDIMACSTransform d = new DSLSATDIMACSTransform();
      d.transformAndSaveAsDIMACS(result, "test1.cnf");
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModel2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(!A) ^ (D v G v BLABLA v C v !D) ^ A ^ D ^ (!E v !F)");
      _builder.newLine();
      final Form result = this.parseHelper.parse(_builder);
      DSLSATDIMACSTransform d = new DSLSATDIMACSTransform();
      d.transformAndSaveAsDIMACS(result, "test2.cnf");
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void tryToSolveSatisfiableWithSAT4J() {
    boolean satWithSAT4J = DSLSAT4JSolver.processFromDSLSATWithSAT4J("test1.DSLSAT");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Satisfiability should be true");
    Assertions.assertTrue(satWithSAT4J, _builder.toString());
  }
  
  @Test
  public void tryToSolveUnsatisfiableWithSAT4J() {
    boolean satWithSAT4J = DSLSAT4JSolver.processFromDSLSATWithSAT4J("test2.DSLSAT");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Satisfiability should be False");
    Assertions.assertFalse(satWithSAT4J, _builder.toString());
  }
  
  @Test
  public void tryToSolveSatisfiableWithMINISAT() {
    boolean satWithMINISAT = DSLSATMiniSAT.processFromDSLSATWithMiniSAT("test1.DSLSAT");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Satisfiability should be true");
    Assertions.assertTrue(satWithMINISAT, _builder.toString());
  }
  
  @Test
  public void tryToSolveUnsatisfiableWithMINISAT() {
    boolean satWithMINISAT = DSLSATMiniSAT.processFromDSLSATWithMiniSAT("test2.DSLSAT");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Satisfiability should be False");
    Assertions.assertFalse(satWithMINISAT, _builder.toString());
  }
  
  @Test
  public void trySolversSameValueSatisfiable() {
    boolean _processFromDSLSATWithMiniSAT = DSLSATMiniSAT.processFromDSLSATWithMiniSAT("test1.DSLSAT");
    boolean _processFromDSLSATWithSAT4J = DSLSAT4JSolver.processFromDSLSATWithSAT4J("test1.DSLSAT");
    boolean _equals = (_processFromDSLSATWithMiniSAT == _processFromDSLSATWithSAT4J);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Satisfiability should be True");
    Assertions.assertTrue(_equals, _builder.toString());
  }
  
  @Test
  public void trySolversSameValueUnsatisfiable() {
    boolean _processFromDSLSATWithMiniSAT = DSLSATMiniSAT.processFromDSLSATWithMiniSAT("test2.DSLSAT");
    boolean _processFromDSLSATWithSAT4J = DSLSAT4JSolver.processFromDSLSATWithSAT4J("test2.DSLSAT");
    boolean _equals = (_processFromDSLSATWithMiniSAT == _processFromDSLSATWithSAT4J);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Satisfiability should be False");
    Assertions.assertTrue(_equals, _builder.toString());
  }
  
  @Test
  public void trySolverComparisonMethodOnSatisfiable() {
    boolean _verifyOutputFromDSLSAT = DSLSATSolversComparison.verifyOutputFromDSLSAT("test1.DSLSAT");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Solvers output should be the same");
    Assertions.assertTrue(_verifyOutputFromDSLSAT, _builder.toString());
  }
  
  @Test
  public void trySolverComparisonMethodOnUnsatisfiable() {
    System.out.println(RandomDSLSATGenerator.getRandomFormula(5));
    boolean _verifyOutputFromDSLSAT = DSLSATSolversComparison.verifyOutputFromDSLSAT("test2.DSLSAT");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Solvers output should be the same");
    Assertions.assertTrue(_verifyOutputFromDSLSAT, _builder.toString());
  }
}
