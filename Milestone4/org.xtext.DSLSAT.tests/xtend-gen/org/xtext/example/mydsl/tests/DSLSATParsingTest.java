/**
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.dSLSAT.Form;
import org.xtext.example.mydsl.tests.DSLSAT4JSolver;
import org.xtext.example.mydsl.tests.DSLSATDIMACSTransform;
import org.xtext.example.mydsl.tests.DSLSATInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(DSLSATInjectorProvider.class)
@SuppressWarnings("all")
public class DSLSATParsingTest {
  @Inject
  private ParseHelper<Form> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(!A v B) ^ (C v !D) ^ A");
      _builder.newLine();
      final Form result = this.parseHelper.parse(_builder);
      DSLSATDIMACSTransform d = new DSLSATDIMACSTransform();
      d.transformAndSaveAsDIMACS(result, "test1.cnf");
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModel2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(!A) ^ (D v G v BLABLA v C v !D) ^ A ^ D ^ (!E v !F)");
      _builder.newLine();
      final Form result = this.parseHelper.parse(_builder);
      DSLSATDIMACSTransform d = new DSLSATDIMACSTransform();
      d.transformAndSaveAsDIMACS(result, "test2.cnf");
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void tryToSolve() {
    DSLSAT4JSolver.solve("test1.cnf");
  }
  
  @Test
  public void tryToFailSolving() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("A ^ !A");
      _builder.newLine();
      final Form result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      DSLSAT4JSolver.solveForm(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
