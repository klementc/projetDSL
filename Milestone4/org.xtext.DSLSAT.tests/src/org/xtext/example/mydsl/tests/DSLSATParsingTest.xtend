/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.dSLSAT.Form
import org.eclipse.xtext.testing.extensions.InjectionExtension

@ExtendWith(InjectionExtension)
@InjectWith(DSLSATInjectorProvider)
class DSLSATParsingTest {
	@Inject
	ParseHelper<Form> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			(!A v B) ^ (C v !D) ^ A
		''')
		var d = new DSLSATDIMACSTransform
		d.transformAndSaveAsDIMACS(result,"test1.cnf")
		
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadModel2() {
		val result = parseHelper.parse('''
			(!A) ^ (D v G v BLABLA v C v !D) ^ A ^ D ^ (!E v !F)
		''')
		var d = new DSLSATDIMACSTransform
		d.transformAndSaveAsDIMACS(result,"test2.cnf")
		
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void tryToSolve(){
		DSLSAT4JSolver.solve("test1.cnf") 
	}
	
	@Test
	def void tryToFailSolving(){
		val result = parseHelper.parse('''
			A ^ !A
		''')

		Assertions.assertNotNull(result)
		DSLSAT4JSolver.solveForm(result)
	}
}
