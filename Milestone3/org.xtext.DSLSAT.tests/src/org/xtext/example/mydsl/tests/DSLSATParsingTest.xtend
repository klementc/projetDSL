/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.dSLSAT.Form
import java.util.HashMap
import org.xtext.example.mydsl.dSLSAT.util.DSLSATSwitch
import org.xtext.example.mydsl.DIMACSTransformation
import java.io.FileOutputStream
import org.eclipse.emf.common.util.URI
import org.xtext.example.mydsl.DSLSATStandaloneSetupGenerated
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.resource.Resource

@ExtendWith(InjectionExtension)
@InjectWith(DSLSATInjectorProvider)
class DSLSATParsingTest {
	@Inject
	ParseHelper<Form> parseHelper
	
	
	def loadSATForm(URI uri){
		new DSLSATStandaloneSetupGenerated().createInjectorAndDoEMFRegistration()
		var res = new ResourceSetImpl().getResource(uri, true)
		res.contents.get(0) as Form
	}
	
	def saveSATForm(URI uri, Form form){
		var Resource rs = new ResourceSetImpl().createResource(uri)
		rs.contents.add(form)
		rs.save(new HashMap())
	}
	
	def void saveDimacs(Form f, String name){
		var DIMACSTransformation tr = new DIMACSTransformation()
		tr.saveDIMACS(f, new FileOutputStream(name+".cnf"))
	}
	
	def void loadCorrectModel(String textToTest) {
		val result = parseHelper.parse(textToTest)
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		//DIMACS
		saveDimacs(result,"test");
	}

	def void loadIncorrectModel(String textToTest) {
		val result = parseHelper.parse(textToTest)
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty)
	}

	
	@Test
	// simple CNF formula
	def void Test1(){
		loadCorrectModel('''
			(A v B v C) ^ (D v E v F)
		''')
	}
	
	@Test
	def void Test2(){
		loadCorrectModel('''
			(!A v B) ^ (C v !D) ^ !D ^ (E v !F v !G) ^ H
		''')
	}
	
	@Test
	def void Test3(){
		loadIncorrectModel('''
			A => B C
		''');
	}
	
	@Test
	def void Test4(){
		loadIncorrectModel('''
			<=> B
		''')
	}

}
