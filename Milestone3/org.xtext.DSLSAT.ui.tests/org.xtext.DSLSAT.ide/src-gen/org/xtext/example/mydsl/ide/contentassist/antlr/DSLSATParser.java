/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalDSLSATParser;
import org.xtext.example.mydsl.services.DSLSATGrammarAccess;

public class DSLSATParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DSLSATGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DSLSATGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFormAccess().getAlternatives(), "rule__Form__Alternatives");
			builder.put(grammarAccess.getConstAccess().getValAlternatives_0(), "rule__Const__ValAlternatives_0");
			builder.put(grammarAccess.getBiImplFormAccess().getGroup(), "rule__BiImplForm__Group__0");
			builder.put(grammarAccess.getBiImplFormAccess().getGroup_1(), "rule__BiImplForm__Group_1__0");
			builder.put(grammarAccess.getImplFormAccess().getGroup(), "rule__ImplForm__Group__0");
			builder.put(grammarAccess.getImplFormAccess().getGroup_1(), "rule__ImplForm__Group_1__0");
			builder.put(grammarAccess.getOrFormAccess().getGroup(), "rule__OrForm__Group__0");
			builder.put(grammarAccess.getOrFormAccess().getGroup_1(), "rule__OrForm__Group_1__0");
			builder.put(grammarAccess.getAndFormAccess().getGroup(), "rule__AndForm__Group__0");
			builder.put(grammarAccess.getAndFormAccess().getGroup_1(), "rule__AndForm__Group_1__0");
			builder.put(grammarAccess.getNandFormAccess().getGroup(), "rule__NandForm__Group__0");
			builder.put(grammarAccess.getNandFormAccess().getGroup_1(), "rule__NandForm__Group_1__0");
			builder.put(grammarAccess.getFormAccess().getGroup_3(), "rule__Form__Group_3__0");
			builder.put(grammarAccess.getNotFormAccess().getGroup(), "rule__NotForm__Group__0");
			builder.put(grammarAccess.getBiImplFormAccess().getRightAssignment_1_2(), "rule__BiImplForm__RightAssignment_1_2");
			builder.put(grammarAccess.getImplFormAccess().getRightAssignment_1_2(), "rule__ImplForm__RightAssignment_1_2");
			builder.put(grammarAccess.getOrFormAccess().getRightAssignment_1_2(), "rule__OrForm__RightAssignment_1_2");
			builder.put(grammarAccess.getAndFormAccess().getRightAssignment_1_2(), "rule__AndForm__RightAssignment_1_2");
			builder.put(grammarAccess.getNandFormAccess().getRightAssignment_1_2(), "rule__NandForm__RightAssignment_1_2");
			builder.put(grammarAccess.getFormAccess().getFormAssignment_0(), "rule__Form__FormAssignment_0");
			builder.put(grammarAccess.getFormAccess().getFormAssignment_1(), "rule__Form__FormAssignment_1");
			builder.put(grammarAccess.getFormAccess().getFormAssignment_2(), "rule__Form__FormAssignment_2");
			builder.put(grammarAccess.getFormAccess().getFormAssignment_3_1(), "rule__Form__FormAssignment_3_1");
			builder.put(grammarAccess.getVarAccess().getIdAssignment(), "rule__Var__IdAssignment");
			builder.put(grammarAccess.getConstAccess().getValAssignment(), "rule__Const__ValAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DSLSATGrammarAccess grammarAccess;

	@Override
	protected InternalDSLSATParser createParser() {
		InternalDSLSATParser result = new InternalDSLSATParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLSATGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLSATGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
